
volumes:
  dbdata:
  caddydata:
  caddyconfig:
  frontend_dist:
  django_static:
  django_media:

services:
  db:
    image: postgres:16
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - dbdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    restart: unless-stopped

  frontend_build:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    volumes:
      - frontend_dist:/dist
    command: /bin/sh -c "cp -r /app/dist/* /dist/"
    restart: "no"

  web:
    build:
      context: .
      dockerfile: backend/Dockerfile
    env_file: .env
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - django_static:/app/staticfiles
      - django_media:/app/media
    expose:
      - "8000"
    command: >
      sh -c "
      python manage.py migrate &&
      python manage.py collectstatic --noinput &&
      gunicorn api.wsgi:application --workers 3 --bind 0.0.0.0:8000"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8000/ || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  caddy:
    image: caddy:2
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - web
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddydata:/data
      - caddyconfig:/config
      - frontend_dist:/srv/frontend
    restart: unless-stopped
